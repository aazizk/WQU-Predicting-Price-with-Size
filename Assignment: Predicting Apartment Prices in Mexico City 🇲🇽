import warnings
from glob import glob

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import wqet_grader
from category_encoders import OneHotEncoder
from IPython.display import VimeoVideo
from ipywidgets import Dropdown, FloatSlider, IntSlider, interact
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression, Ridge  # noqa F401
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import make_pipeline
from sklearn.utils.validation import check_is_fitted

warnings.simplefiltdef wrangle(filepath):

def wrangle(filepath):
    # Read CSV file
    df = pd.read_csv(filepath)

    # Subset data: Apartments in "Capital Federal", less than 400,000
    mask_ba = df["place_with_parent_names"].str.contains("Distrito Federal")
    mask_apt = df["property_type"] == "apartment"
    mask_price = df["price_aprox_usd"] < 100_000
    df = df[mask_ba & mask_apt & mask_price]

    # Subset data: Remove outliers for "surface_covered_in_m2"
    low, high = df["surface_covered_in_m2"].quantile([0.1, 0.9])
    mask_area = df["surface_covered_in_m2"].between(low, high)
    df = df[mask_area]

    # Split "lat-lon" column
    df[["lat", "lon"]] = df["lat-lon"].str.split(",", expand=True).astype(float)
#    df.drop(columns="lat-lon", inplace=True) Added in below drop code

    # Get place name
    df["borough"] = df["place_with_parent_names"].str.split("|", expand=True)[1]
    df.drop(columns=["place_with_parent_names", "lat-lon"], inplace=True)#dropping lat-lon and place with parent name
    df.drop(columns=["surface_total_in_m2", "floor", "rooms", "expenses", "price_usd_per_m2"], inplace=True) #dropping null values
    df.drop(columns=["operation", "property_type", "currency", "properati_url"], inplace=True) #drop low and high cadinality columns
    df.drop(columns=["price", "price_aprox_local_currency", "price_per_m2"], inplace=True) #drop leakage
#    df.drop(columns=["surface_total_in_m2", "rooms"], inplace=True) #drop multicollinearity columns
    return df

# Use this cell to test your wrangle function and explore the data
file = "data/mexico-city-real-estate-1.csv"
df = wrangle(file)
df.info()
    
#Data exploration commands
df.select_dtypes("object").head()
df.select_dtypes("object").nunique #checking low and high cadinality
df.isnull().sum() / len(df) # checking nulls
sorted(df.columns) # to check leakage
corr = df.select_dtypes("number").drop(columns = "price_aprox_usd").corr()
sns.heatmap(corr) # heatmap to check multi-colinearity

files = glob(("data/mexico-city-real-estate-*.csv"))
files

frames = [wrangle(file) for file in files]
df = pd.concat(frames, ignore_index = True)
print(df.info())
df.head()

# Plot distribution of price
plt.hist(df["price_aprox_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Count")
plt.title("Distribution of Apartment Prices");
# Don't delete the code below ðŸ‘‡
plt.savefig("images/2-5-4.png", dpi=150)

# Plot price vs area
plt.scatter(x=df["surface_covered_in_m2"], y=df["price_aprox_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title("Mexico City: Price vs. Area");
# Don't delete the code below ðŸ‘‡
plt.savefig("images/2-5-5.png", dpi=150)

# Plot Mapbox location and price
fig = px.scatter_mapbox(
    df,  # Our DataFrame
    lat="lat",
    lon="lon",
    width=600,  # Width of map
    height=600,  # Height of map
    color="price_aprox_usd",
    hover_data=["price_aprox_usd"],  # Display price when hovering mouse over house
)

fig.update_layout(mapbox_style="open-street-map")

fig.show()

# Split data into feature matrix `X_train` and target vector `y_train`.
target = "price_aprox_usd"
features = ["surface_covered_in_m2", "lat", "lon", "borough"]
X_train = df[features]
y_train = df[target]

y_mean = y_train.mean()
y_pred_baseline = [y_mean] * len(y_train)
baseline_mae = mean_absolute_error(y_train, y_pred_baseline)
print("Mean apt price:", y_mean)
print("Baseline MAE:", baseline_mae)

# Build Model
model = make_pipeline(
    OneHotEncoder(use_cat_names=True),
    SimpleImputer(),
    Ridge()
)
# Fit model
model.fit(X_train, y_train)

X_test = pd.read_csv("data/mexico-city-test-features.csv")
print(X_test.info())
X_test.head()

y_test_pred = pd.Series(model.predict(X_test))
y_test_pred.head()

coefficients = model.named_steps["ridge"].coef_.round(2)
features = model.named_steps["onehotencoder"].get_feature_names()
feat_imp = pd.Series(coefficients, index = features)
feat_imp

# Create horizontal bar chart
feat_imp.sort_values(key = abs).tail(10).plot(kind = "barh")
plt.xlabel("Importance [USD]")
plt.ylabel("Feature")
plt.title("Feature Importance for Apartment Price");
# Don't delete the code below ðŸ‘‡
plt.savefig("images/2-5-13.png", dpi=150)
