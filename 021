import warnings

import matplotlib.pyplot as plt
import pandas as pd
import wqet_grader
from IPython.display import VimeoVideo
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.utils.validation import check_is_fitted

warnings.simplefilter(action="ignore", category=FutureWarning)
wqet_grader.init("Project 2 Assessment")

def wrangle(file_path):
    """
    This function takes in as input the a path of a file and returns a dataframe to it
    
    input: file_path, path of a csv file
    output: data_frame, data frame to the file
    """
    data_frame = pd.read_csv(file_path)
    return data_frame

df = wrangle("data/buenos-aires-real-estate-1.csv")
print("df shape:", df.shape)
df.head()

# Check your work
assert (
    len(df) <= 1781
), f"`df` should have no more than 1781 observations, not {len(df)}."

plt.hist(df["surface_covered_in_m2"])
plt.xlabel("Area [sq meters]")
plt.title("Distribution of Apartment Sizes");

#some cleaning in function

def wrangle(file_path):
    """
    This function takes in as input the a path of a file and returns a dataframe to it
    
    input: file_path, path of a csv file
    output: data_frame, data frame to the file
    """
    data_frame = pd.read_csv(file_path)
    data_frame_BI = data_frame[data_frame["place_with_parent_names"].str.contains("Capital Federal")]  #slicing on capital
    data_frame_BI = data_frame_BI[data_frame_BI["price_aprox_usd"]<= 400000] #slicing on price
    data_frame_BI = data_frame_BI[data_frame_BI["property_type"] == "apartment"] #slicing on apartment
    return data_frame_BI

#Subsetting data using masks:
def wrangle(file_path):
    """
    This function takes in as input the a path of a file and returns a dataframe to it
    
    input: file_path, path of a csv file
    output: data_frame, data frame to the file
    """
    df = pd.read_csv(file_path)
    mask_a = df["place_with_parent_names"].str.contains("Capital Federal") # mask for Capital
    mask_b = df["property_type"] == "apartment" # mask for Property type
    mask_c = df["price_aprox_usd"]<= 400_000 # mask for Price
    return df[mask_a & mask_b & mask_c]

#Function Call
df = wrangle("data/buenos-aires-real-estate-1.csv")
print("df shape:", df.shape)
df.head()

plt.hist(df["surface_covered_in_m2"])
plt.xlabel("Area [sq meters]")
plt.title("Distribution of Apartment Sizes");

df.describe()["price_aprox_usd"]

low, high = df["surface_covered_in_m2"].quantile([0.1,0.9])
mask_area = df["surface_covered_in_m2"].between(low, high)
df= df[mask_area]
df.head()

#Finding some correlation in price vs area
plt.scatter(x=df["surface_covered_in_m2"], y=df["price_aprox_usd"])
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title("Buenos Aires Price Vs Area");

#finding data correlation
df["surface_covered_in_m2"].corr(df["price_aprox_usd"])

#splitting data to train the model
features = ["surface_covered_in_m2"]
# X_train for feature matrix
X_train = df[features]

target = "price_aprox_usd"
#y-train for Target Vector
y_train = df[target]

#knowking the mean of target value
y_mean = y_train.mean()

#baseline
y_pred_baseline = [y_mean] * len(y_train)

#our naive model
plt.plot(X_train, y_pred_baseline, color = "orange", label = "Baselining")
plt.scatter(X_train, y_train)
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")
plt.title("Buenos Aires: Price vs. Area")
plt.legend();

#basliniing and mean baseline error
mae_baseline = mean_absolute_error(y_train, y_pred_baseline)
print("Mean apt price:", round(y_mean, 2))
print("Baseline MAE:", round(mae_baseline, 2))

#instantiating the model
model = LinearRegression()

# Check your work
assert isinstance(model, LinearRegression)

#Fitting the model
model.fit(X_train, y_train)

# Check your work
check_is_fitted(model)

#predicting with the model
y_pred_training = model.predict(X_train)
y_pred_training[:5]

# Check your work
assert (
    len(y_pred_training) == 1343
), f"There should be 1343 predictions in `y_pred_training`, not {len(y_pred_training)}."

#evaluating model
mae_training = mean_absolute_error(y_train, y_pred_training)
print("Training MAE:", round(mae_training, 2))

#testing a data read from a csv
X_test = pd.read_csv("data/buenos-aires-test-features.csv")[features]
y_pred_test = pd.Series(model.predict(X_test))
y_pred_test.head()

#model intercept
intercept = round(model.intercept_, 2)
print("Model Intercept:", intercept)
assert any([isinstance(intercept, int), isinstance(intercept, float)])

#model coefficients
coefficient = round(model.coef_[0], 2)
print('Model coefficient for "surface_covered_in_m2":', coefficient)
assert any([isinstance(coefficient, int), isinstance(coefficient, float)])

#Writing equation using fprint
f"Apratment Price = {intercept} + {coefficient} * Surface Area"

#Model plot
plt.plot(X_train, model.predict(X_train), color = "r", Label = "Linear Model");
plt.scatter(X_train, y_train)
plt.xlabel("surface covered [sq meters]")
plt.ylabel("price [usd]")
plt.legend();
