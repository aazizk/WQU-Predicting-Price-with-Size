import warnings
from glob import glob

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import wqet_grader
from category_encoders import OneHotEncoder
from IPython.display import VimeoVideo
from sklearn.linear_model import LinearRegression, Ridge  # noqa F401
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import make_pipeline
from sklearn.utils.validation import check_is_fitted

warnings.simplefilter(action="ignore", category=FutureWarning)
wqet_grader.init("Project 2 Assessment")

def wrangle(filepath):
    # Read CSV file
    df = pd.read_csv(filepath)

    # Subset data: Apartments in "Capital Federal", less than 400,000
    mask_ba = df["place_with_parent_names"].str.contains("Capital Federal")
    mask_apt = df["property_type"] == "apartment"
    mask_price = df["price_aprox_usd"] < 400_000
    df = df[mask_ba & mask_apt & mask_price]

    # Subset data: Remove outliers for "surface_covered_in_m2"
    low, high = df["surface_covered_in_m2"].quantile([0.1, 0.9])
    mask_area = df["surface_covered_in_m2"].between(low, high)
    df = df[mask_area]

    # Split "lat-lon" column
    df[["lat", "lon"]] = df["lat-lon"].str.split(",", expand=True).astype(float)
    df.drop(columns="lat-lon", inplace=True)
    
    df["neighborhood"] = df["place_with_parent_names"].str.split("|", expand = True)[3]
    df.drop(columns = "place_with_parent_names", inplace = True)
    
    return df
    
#using glob to read multiple files
files = glob("data/buenos-aires-real-estate-*.csv")
frames = [] #initialize the df array
for file in files: #read files one by one
    df = wrangle(file) # wrangle files
    frames.append(df) #append dfs

df = pd.concat(frames, ignore_index=True)

#splitting data for training
target = "price_aprox_usd"
features = ["neighborhood"]
y_train = df[target]
X_train = df[features]

#baseline
y_mean = y_train.mean()
y_pred_baseline = [y_mean] * len(y_train)
print("Mean apt price:", y_mean)

ohe = OneHotEncoder(use_cat_names = True)
ohe.fit(df)
XT_train = ohe.transform(df)
print(XT_train.shape)
XT_train.head()
print("Baseline MAE:", mean_absolute_error(y_train, y_pred_baseline))
